    string
string  s;
 std::string::iterator it;
 s.begin()=first character;
 s.end()=end character;
 s.size()=s.length()=length and size of character;
 s.insert()
     str.insert(position,str); or str.insert(postion,"s");
     int first example whole string insert at position and second just s  char  but "s" != 's' means we can't use 's' this form
      str.insert(position,str,l,r); insert  sub string l to length of r from str at  position but  
      str.insert(position,"thsi fdf",length) length  is  sizeof substring from "this fdf" string  if  lenght of exits then insert whole string.

 s.erase()
 s.swap()
 s.replace()
 std::string base="this is a test string.";
  std::string str2="n example";
  std::string str3="sample phrase";
  std::string str4="useful.";

  // replace signatures used in the same order as described above:

  // Using positions:                 0123456789*123456789*12345
  std::string str=base;           // "this is a test string."
  str.replace(9,5,str2);          // "this is an example string." (1)
  str.replace(19,6,str3,7,6);     // "this is an example phrase." (2)
  str.replace(8,10,"just a");     // "this is just a phrase."     (3)
  str.replace(8,6,"a shorty",7);  // "this is a short phrase."    (4)
  str.replace(22,1,3,'!');        // "this is a short phrase!!!"  (5)

  // Using iterators:                                               0123456789*123456789*
  str.replace(str.begin(),str.end()-3,str3);                    // "sample phrase!!!"      (1)
  str.replace(str.begin(),str.begin()+6,"replace");             // "replace phrase!!!"     (3)
  str.replace(str.begin()+8,str.begin()+14,"is coolness",7);    // "replace is cool!!!"    (4)
  str.replace(str.begin()+12,str.end()-4,4,'o');                // "replace is cooool!!!"  (5)
  str.replace(str.begin()+11,str.end(),str4.begin(),str4.end());
 s.push_back()

 pos :: Insertion point: The new contents are inserted before the character at position pos.
       If this is greater than the object's length, it throws out_of_range.
        Note: The first character is denoted by a value of 0 (not 1).

---------------------------substring  found or not------
bool n=boost::algorithm::contains(str1,str2);if(n==1){found}
if(strstr(str1.c_str(),str2.c_str())){found}
if(s.find(str)!=string::npos){found}
if(str.contains(str1)){found}
---------with position found for not----
int pos=0,index;
while((index=str1.find(str2,pos))!=string::npos)
pos=index+1;

--------------------------convert whole string to lower--------------------
    transform(s.begin(),s.end(),s.begin(),::tolower);
    std::find (myints, myints+4, 30);
--------------------------convert string to integer--------------------------
   int feet = atoi( instr.c_str() );  

--------------------------delect dulicate from array----------------------
#include <bits/stdc++.h>
using namespace std;

// Function to remove duplicate elements
void removeDuplicates(int arr[], int n)
{

	// Initialise a vector
	// to store the array values
	// and an iterator
	// to traverse this vector
	vector<int> v(arr, arr + n);
	vector<int>::iterator it;

	// using unique() method to remove duplicates
	it = unique(v.begin(), v.end());

	// resize the new vector
	v.resize(distance(v.begin(), it));

	// Print the array with duplicates removed
	cout << "\nAfter removing duplicates:\n";
	for (it = v.begin(); it != v.end(); ++it)
		cout << *it << ", ";
	cout << '\n';
}

// Driver code
int main()
{
	int arr[] = { 1, 2, 2, 3, 4, 4, 4, 5, 5 };

	int n = sizeof(arr) / sizeof(arr[0]);

	// Print array
	cout << "\nBefore removing duplicates:\n";
	for (int i = 0; i < n; i++)
		cout << arr[i] << " ";

	// call removeDuplicates()
	removeDuplicates(arr, n);

	return 0;
}
-----------------------------------------------------------------------------
  size_t flag = str.find(str1);
    if (flag != string::npos)
    found = str.find(arr, flag+1);
    here  found is  postion after flag;
    if str1 is character then also work
    size_t found = str.find(str1, postion1, postion2);
    if (found != string::npos)
        cout << found << endl;
-----------------------------------------------------------------------------
make  new string s  from  another  [string str2 = str.substr(i, n);]

