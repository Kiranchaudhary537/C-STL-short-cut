
--------------------------convert whole string to lower--------------------
    transform(s.begin(),s.end(),s.begin(),::tolower);





---------------- ------------find-------string--------
    std::find (s.begin(),s.begin()+pos, char);
               here s.begin() is starting point;
               pos is last position  of substring to  find  
               char   which char  to find;
------- -------array-----------------
    std::find (myints, myints+4, 30);
    -----
    std::min_element(array+i,array+j);  min element between position  i  to j;
 std::max_element(array+i,array+j);       max element between position  i  to j;-
 -------------upper and lower bound details-----
 (upper_bound(arr,arr+n,t)-arr;
 retust is position of element  strictly higer  then  t;
 ---------------

 --------
The & (bitwise AND) in C or C++ takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if both bits are 1. 
 
The | (bitwise OR) in C or C++ takes two numbers as operands and does OR on every bit of two numbers. The result of OR is 1 if any of the two bits is 1. 
 
The ^ (bitwise XOR) in C or C++ takes two numbers as operands and does XOR on every bit of two numbers. The result of XOR is 1 if the two bits are different. 
 
The << (left shift) in C or C++ takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift. 
 
The >> (right shift) in C or C++ takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift. 
 
The ~ (bitwise NOT) in C or C++ takes one number and inverts all bits of it 
 


